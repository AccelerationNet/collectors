(defpackage :collectors-test
  (:use :cl :cl-user :collectors :lisp-unit2))
(in-package :collectors-test)

(define-test make-reducer-test (:tags '(reducer))
  (let ((r (make-reducer #'+ :initial-value 0)))
    (assert-eql 0 (funcall r 0))
    (assert-eql 3 (funcall r 1 2))
    (assert-eql 9 (funcall r 1 2 3))
    (assert-eql 9 (funcall r))))

(define-test with-reducer-test (:tags '(reducer))
  (with-reducer (r #'+ :initial-value 0)
    (assert-eql 0 (r 0))
    (assert-eql 3 (r 1 2))
    (assert-eql 9 (r 1 2 3))
    (assert-eql 9 (r))))

(define-test with-collector-test (:tags '(collector))
  (with-collector (test)
    (test :a nil :key)
    (test :and :a)
    (test :value :make)
    (test :a :plist)
    (assert-equal
        '(:a nil :key :and :a :value :make :a :plist)
        (test)
     ))
  (with-collector (test :collect-nil nil)
    (test :a nil :key)
    (test :and :a)
    (test :value :make)
    (test :a :plist)
    (assert-equal
        '(:a :key :and :a :value :make :a :plist)
        (test)
     )))

(define-test with-collector2 (:tags '(collector))
  (with-collector (test :from-end t)
    (test :a nil :key)
    (test :and :a)
    (test :value :make)
    (test :a :plist)
    (assert-equal
        '(:plist :a :make :value :a :and :key nil :a)
        (test)
     ))
  (with-collector (test :from-end t :collect-nil nil)
    (test :a nil :key)
    (test :and :a)
    (test :value :make)
    (test :a :plist)
    (assert-equal
        '(:plist :a :make :value :a :and :key :a)
        (test)
     )))

(define-test with-appender-test (:tags '(appender))
  (with-appender (test)
    (test :a :key)
    (test '(:and :a))
    (test '(:value) '(:make))
    (test '(:a :plist))
    (assert-equal
        '(:a :key :and :a :value :make :a :plist)
        (test)
     )))

(define-test with-string-builder-test (:tags '(strings))
  (with-string-builder (test)
    (test :a :key)
    (test :and :a)
    (test :value :make)
    (test "" nil)
    (test :a :plist)
    (assert-equal
        "AKEYANDAVALUEMAKEAPLIST"
        (test)
     ))
  (with-string-builder (test :delimiter ", ")
    (test nil)
    (test :put)
    (test nil)
    (test :some)
    (test :commas)
    (test :in)
    (assert-equal
        "PUT, SOME, COMMAS, IN"
        (test)
     )))

(define-test with-formatter-test (:tags '(strings))
  (with-formatter (test)
    (test "~D ~D ~D" 0 0 0)
    (test "~A" 1)
    (test "~A" 2)
    (test "~A" 3)
    (test "ABC")
    (assert-equal "0 0 0123ABC" (test)))
  (with-formatter (test :delimiter "-")
    (test "~D ~D ~D" 0 0 0)
    (test "~A" 1)
    (test "~A" 2)
    (test "~A" 3)
    (test "ABC")
    (assert-equal "0 0 0-1-2-3-ABC" (test))))

(define-test with-mapping-collector-test (:tags '(mapping-collector collector))
  (with-mapping-collector (test (&rest nums)
                            (apply #'+ nums))
    (test 1)
    (test 1 2)
    (test 1 2 3)
    (test 1 2 3 4)
    (assert-equal '(1 3 6 10) (test))))

(define-test with-mapping-appender-test (:tags '(mapping-appender appender))
  (with-mapping-appender (test (&rest nums)
                            (mapcar (lambda (x) (* 2 x)) nums))
    (test 1)
    (assert-equal '(2) (test))
    (test 1 2)
    (assert-equal '(2 2 4) (test))
    (test 1 2 3)
    (test 1 2 3 4)
    (assert-equal '(2 2 4 2 4 6 2 4 6 8) (test))))

(define-test reducer-place (:tags '(place reducer))
  (let ((reduced 1))
    (with-reducer (r #'+ :place reduced)
      (r 0)
      (assert-equal 1 reduced)
      (assert-equal 2 (r 1))
      (assert-equal 2 reduced)
      (assert-equal 7 (r 2 3))
      (assert-equal 7 reduced))))

(define-test appender-place (:tags '(place appender))
  (let ((appended '(:A)))
    (with-appender (a :place appended)
      (a 0)
      (assert-equal '(:A 0) appended)
      (assert-equal '(:A 0 1) (a 1))
      (assert-equal '(:A 0 1) appended)
      (assert-equal '(:A 0 1 2 3 4) (a '(2 3) '(4)))
      (assert-equal '(:A 0 1 2 3 4) appended))))

(define-test collector-place (:tags '(place collector))
  (let ((collected '(:A)))
    (with-collector (c :place collected)
      (c 0)
      (assert-equal '(:a 0) collected)
      (assert-equal '(:a 0 1) (c 1))
      (assert-equal '(:a 0 1) collected)
      (assert-equal '(:a 0 1 (2 3) (4)) (c '(2 3) '(4)))
      (assert-equal '(:a 0 1 (2 3) (4)) collected))))

(define-test deoperate-lists (:tags '(collector deoperate))
  (let ((c (make-collector)))
    (assert-equal '(1 2 3 4 5) (funcall c 1 2 3 4 5))
    (assert-equal '(1 2 4 5) (deoperate c 3))
    (assert-equal '(1 5) (deoperate c '(2 4 6 8)))))

